/* chartist-plugin-tooltip 0.0.18
 * Copyright Â© 2017 Markus Padourek
 * Free to use under the WTFPL license.
 * http://www.wtfpl.net/
 */

!(function (a, b) { typeof define === 'function' && define.amd ? define(['chartist'], c => a.returnExportsGlobal = b(c)) : typeof exports === 'object' ? module.exports = b(require('chartist')) : a['Chartist.plugins.tooltip'] = b(Chartist); }(this, a => ((function (a, b, c) {
  function d(a) { f(a, 'tooltip-show') || (a.className += ' tooltip-show'); } function e(a) { const b = new RegExp('tooltip-show\\s*', 'gi'); a.className = a.className.replace(b, '').trim(); } function f(a, b) { return (` ${a.getAttribute('class')} `).indexOf(` ${b} `) > -1; } function g(a, b) { do { a = a.nextSibling; } while (a && !f(a, b));return a; } function h(a) { return a.innerText || a.textContent; } const i = {
    currency: void 0, currencyFormatCallback: void 0, tooltipOffset: { x: 0, y: -20 }, anchorToPoint: !1, appendToBody: !1, class: void 0, pointClass: 'ct-point',
  }; c.plugins = c.plugins || {}, c.plugins.tooltip = function (j) { return j = c.extend({}, i, j), function (i) { function k(a, b, c) { n.addEventListener(a, (a) => { b && !f(a.target, b) || c(a); }); } function l(b) { p = p || o.offsetHeight, q = q || o.offsetWidth; let c; let d; const e = -q / 2 + j.tooltipOffset.x; const f = -p + j.tooltipOffset.y; if (j.appendToBody)o.style.top = `${b.pageY + f}px`, o.style.left = `${b.pageX + e}px`; else { const g = n.getBoundingClientRect(); const h = b.pageX - g.left - a.pageXOffset; const i = b.pageY - g.top - a.pageYOffset; !0 === j.anchorToPoint && b.target.x2 && b.target.y2 && (c = parseInt(b.target.x2.baseVal.value), d = parseInt(b.target.y2.baseVal.value)), o.style.top = `${(d || i) + f}px`, o.style.left = `${(c || h) + e}px`; } } let m = j.pointClass; i.constructor.name == c.Bar.prototype.constructor.name ? m = 'ct-bar' : i.constructor.name == c.Pie.prototype.constructor.name && (m = i.options.donut ? 'ct-slice-donut' : 'ct-slice-pie'); var n = i.container; var o = n.querySelector('.chartist-tooltip'); o || (o = b.createElement('div'), o.className = j.class ? `chartist-tooltip ${j.class}` : 'chartist-tooltip', j.appendToBody ? b.body.appendChild(o) : n.appendChild(o)); var p = o.offsetHeight; var q = o.offsetWidth; e(o), k('mouseover', m, (a) => { const e = a.target; let f = ''; const k = i instanceof c.Pie ? e : e.parentNode; const m = k ? e.parentNode.getAttribute('ct:meta') || e.parentNode.getAttribute('ct:series-name') : ''; let n = e.getAttribute('ct:meta') || m || ''; const r = !!n; let s = e.getAttribute('ct:value'); if (j.transformTooltipTextFnc && typeof j.transformTooltipTextFnc === 'function' && (s = j.transformTooltipTextFnc(s)), j.tooltipFnc && typeof j.tooltipFnc === 'function')f = j.tooltipFnc(n, s); else { if (j.metaIsHTML) { const t = b.createElement('textarea'); t.innerHTML = n, n = t.value; } if (n = `<span class="chartist-tooltip-meta">${n}</span>`, r)f += `${n}<br>`; else if (i instanceof c.Pie) { const u = g(e, 'ct-label'); u && (f += `${h(u)}<br>`); }s && (j.currency && (s = void 0 != j.currencyFormatCallback ? j.currencyFormatCallback(s, j) : j.currency + s.replace(/(\d)(?=(\d{3})+(?:\.\d+)?$)/g, '$1,')), s = `<span class="chartist-tooltip-value">${s}</span>`, f += s); }f && (o.innerHTML = f, l(a), d(o), p = o.offsetHeight, q = o.offsetWidth); }), k('mouseout', m, () => { e(o); }), k('mousemove', null, (a) => { !1 === j.anchorToPoint && l(a); }); }; };
}(window, document, a)), a.plugins.tooltip)));
// # sourceMappingURL=chartist-plugin-tooltip.min.js.map
